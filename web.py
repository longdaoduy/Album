import streamlit as st
from PIL import Image
import os
from pymilvus import Collection
from query_data import get_image_embedding
import numpy as np
from collections import defaultdict

st.set_page_config(page_title="Ph√¢n lo·∫°i ·∫£nh theo ƒë·ªãa ƒëi·ªÉm", layout="wide")
st.title("üåè Ph√¢n lo·∫°i ·∫£nh theo ƒë·ªãa ƒëi·ªÉm (Zilliz + CLIP)")

uploaded_files = st.file_uploader(
    "üì§ T·∫£i l√™n nhi·ªÅu ·∫£nh (jpg, jpeg, png, webp):",
    type=["jpg", "jpeg", "png", "webp"],
    accept_multiple_files=True
)

if uploaded_files:
    st.info("‚è≥ ƒêang x·ª≠ l√Ω v√† truy v·∫•n t·ª´ng ·∫£nh, vui l√≤ng ch·ªù...")

    input_dir = "input"
    os.makedirs(input_dir, exist_ok=True)

    # K·∫øt n·ªëi ƒë·∫øn Zilliz
    collection = Collection("image_collection")
    collection.load()

    grouped_results = defaultdict(list)  # {location: [ (image, similarity) ]}

    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file)
        filename = uploaded_file.name
        temp_path = os.path.join(input_dir, filename)
        image.save(temp_path)

        try:
            query_embedding = get_image_embedding(filename)
            search_params = {"metric_type": "L2", "params": {"nprobe": 10}}

            results = collection.search(
                data=[query_embedding.tolist()],
                anns_field="embedding",
                param=search_params,
                limit=1,  # ch·ªâ l·∫•y top 1
                output_fields=["image_path", "location"]
            )

            if results and len(results[0]) > 0:
                hit = results[0][0]
                location = hit.entity.get("location")
                similarity = (1 - hit.distance) * 100
                grouped_results[location].append((image, similarity))
            else:
                grouped_results["Kh√¥ng x√°c ƒë·ªãnh"].append((image, 0))

        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh {filename}: {e}")

        finally:
            # X√≥a ·∫£nh t·∫°m
            if os.path.exists(temp_path):
                os.remove(temp_path)

    # ======= HI·ªÇN TH·ªä K·∫æT QU·∫¢ =======
    if grouped_results:
        st.success("‚úÖ ƒê√£ ho√†n t·∫•t ph√¢n lo·∫°i ·∫£nh theo ƒë·ªãa ƒëi·ªÉm!")

        for location, images in grouped_results.items():
            st.markdown(f"### üìç **{location}** ({len(images)} ·∫£nh)")
            cols = st.columns(4)
            for idx, (img, sim) in enumerate(images):
                with cols[idx % 4]:
                    st.image(img, caption=f"{sim:.2f}%", use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ph√¢n lo·∫°i th√†nh c√¥ng.")
